trigger:
  branches:
    include:
      - master
      - develop
  paths:
    include:
      - Minor.Miffy.Core/
      - Minor.Miffy.Core.Test/
      - Minor.Miffy.MicroServices/
      - Minor.Miffy.MicroServices.Test/
      - Minor.Miffy.MicroServices.Test.Conventions/
      - Minor.Miffy.Microservices.Test.Integration/
      - Minor.Miffy.RabbitMQBus/
      - Minor.Miffy.RabbitMQBus.Test/
      - Minor.Miffy.RabbitMQBus.Test.Integration/
      - azure-pipelines.yaml

variables:
  buildConfiguration: 'Release'
  projects: |
    Minor.Miffy.Core/Minor.Miffy.Core.csproj
    Minor.Miffy.Microservices/Minor.Miffy.Microservices.csproj
    Minor.Miffy.RabbitMQBus/Minor.Miffy.RabbitMQBus.csproj
  testProjects: |
    Minor.Miffy.Core.Test
    Minor.Miffy.MicroServices.Test
    Minor.Miffy.MicroServices.Test.Conventions
    Minor.Miffy.RabbitMQBus.Test
  projectKey: MaartenH:Miffy
  projectName: MaartenH Miffy

stages:
  - stage: PreRelease
    displayName: PreRelease
    jobs:
      - job: PreRelease
        displayName: PreRelease
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: SonarQubePrepare@4
            condition: eq(variables['build.sourcebranch'], 'refs/heads/master')
            inputs:
              SonarQube: 'SonarQube Service Connection'
              scannerMode: 'MSBuild'
              projectKey: $(projectKey)
              projectName: $(projectName)

          - task: DotNetCoreCLI@2
            displayName: 'dotnet build'
            inputs:
              projects: $(projects)
              arguments: '--configuration $(BuildConfiguration)'
        
          - task: DotNetCoreCLI@2
            displayName: 'dotnet test'
            inputs:
              command: test
              projects: $(testProjects)
              arguments: '--configuration $(BuildConfiguration) --collect:"Code Coverage"'

          - task: SonarQubeAnalyze@4
            condition: eq(variables['build.sourcebranch'], 'refs/heads/master')
          - task: SonarQubePublish@4
            condition: eq(variables['build.sourcebranch'], 'refs/heads/master')
            inputs:
              pollingTimeoutSec: '300'
          - task: sonar-buildbreaker@8
            condition: eq(variables['build.sourcebranch'], 'refs/heads/master')
            inputs:
              SonarQube: 'SonarQube Service Connection'
        
          - task: DotNetCoreCLI@2
            displayName: 'dotnet pack'
            inputs:
              command: 'pack'
              packagesToPack: '**/*.csproj'
              versioningScheme: byPrereleaseNumber
              majorVersion: 0
              minorVersion: 1
              patchVersion: $(Build.BuildId)
              nobuild: true
        
          - task: DotNetCoreCLI@2
            displayName: 'nuget push'
            inputs:
              command: 'push'
              packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
              nuGetFeedType: 'internal'
              publishVstsFeed: 'd2d10d82-d2e1-4909-9810-5bf6d3a2eba4'
  - stage: Release
    displayName: Release
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    jobs:
      - job: Release
        displayName: Release
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: DotNetCoreCLI@2
            displayName: 'dotnet build'
            inputs:
              projects: $(projects)
              arguments: '--configuration $(BuildConfiguration)'

          # To be sure
          - task: DotNetCoreCLI@2
            displayName: 'dotnet test'
            inputs:
              command: test
              projects: $(testProjects)
              arguments: '--configuration $(BuildConfiguration)'

          - task: DotNetCoreCLI@2
            displayName: 'dotnet pack'
            inputs:
              command: 'pack'
              packagesToPack: '**/*.csproj'
              versioningScheme: byReleaseNumber
              patchVersion: $(Build.BuildId)
              nobuild: true

          - task: DotNetCoreCLI@2
            displayName: 'nuget push'
            inputs:
              command: 'push'
              packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
              nuGetFeedType: 'internal'
              publishVstsFeed: 'd2d10d82-d2e1-4909-9810-5bf6d3a2eba4'
